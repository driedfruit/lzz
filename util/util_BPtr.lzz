// util_BPtr.lzz
//
// smart pointer for base classes
//
// Copyright (C) 2002, Michael Spencer
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, subject to the following
// restrictions:
// 
//   1. The origin of this software must not be misrepresented; you must
//      not claim that you wrote the original software. If you use this
//      software in a product, an acknowledgment in the product
//      documentation would be appreciated but is not required.
// 
//   2. Altered source versions must be plainly marked as such, and must
//      not be misrepresented as being the original software.
// 
// Basil documentation, as well as the latest version, is available at
// http://www.lazycplusplus.com/basil.
//
// Send comments and bug reports to michael_spencer@lazycplusplus.com.
// 

// send template definitions to tpl file
$pragma tpl

$hdr
// std lib
#include <cassert>
#include <cstddef>
$end

$tpl
// std lib
#include <cassert>
$end

// util
namespace util
{
  // BPtr
  template <class T>
  class BPtr
  {
    // pointer to data
    T * m_t;

    // pointer to number of references (or 0 if m_t is not reference counted) 
    int * m_num_ref;

  public:
    // default constructor
    BPtr ()
      : m_t (0), m_num_ref (0)
    {
    }

    // constructor
    BPtr (T * t)
      : m_t (t), m_num_ref (new int)
    {
      * m_num_ref = 1;
    }

    // copy constructor
    inline BPtr (BPtr <T> const & bptr)
      : m_t (bptr.m_t), m_num_ref (bptr.m_num_ref)
    {
      if (m_num_ref)
      {
        ++ * m_num_ref;
      }
    }

    // destructor
    ~ BPtr ()
    {
      if (m_num_ref && -- * m_num_ref == 0)
      {
        delete m_num_ref;
        delete m_t;
      }
    }

    // copy assignment
    BPtr <T> & operator = (BPtr <T> const & bptr)
    {
      if (bptr.m_num_ref)
      {
        ++ * bptr.m_num_ref;
      }
      if (m_num_ref && -- * m_num_ref == 0)
      {
        delete m_num_ref;
        delete m_t;
      }
      m_t = bptr.m_t;
      m_num_ref = bptr.m_num_ref;
      return * this;
    }

    // operator ->
    inline T * operator -> () const
    {
      assert (m_t != 0);
      return m_t;
    }

    // operator *
    inline T & operator * () const
    {
      assert (m_t != 0);
      return * m_t;
    }

    // true if set
    inline bool isSet () const
    {
      return m_t != 0;
    }

    // get pointer
    inline T * pointer () const
    {
      assert (m_t != 0);
      return m_t;
    }

    // get handle
    inline size_t getHandle () const
    {
      return (size_t) m_t;
    }

    // get non-reference counted pointer from this pointer
    BPtr <T> unref () const
    {
      BPtr <T> bptr;
      bptr.m_t = m_t;
      return bptr;
    }
      
    // get non-reference counted pointer from given pointer
    static BPtr <T> unref (T * t)
    {
      BPtr <T> bptr;
      bptr.m_t = t;
      return bptr;
    }
  }
}
