// util_FilenameTable.lzz
//

$hdr
// util
#include "util_Filename.h"
#include "util_String.h"
$end

$src
// util
#include "util_FileOp.h"
#include "util_FilenameImpl.h"
#include "util_FilenameImplPtrDataTable.h"
#include "util_GetRealPath.h"
#include "util_StringTable.h"
$end

// private namespace
namespace
{
  // using util
  using namespace util;

  // FilenameTable
  struct FilenameTable
  {
    // data table (keyed on name)
    FilenameImplPtrDataTable data_table;

    // get filename, return true if successful
    bool getFilename (util::String const & name_str, Filename & filename)
    {
      char const * name = storeString (file_op::dos2unix (name_str));
      FilenameImplPtrDataTableFindResult result = data_table.findData ((size_t) name);
      if (result.hasData ())
      {
        filename = Filename (result.getData ().pointer ());
        return true;
      }
      String realname_str;
      if (getRealPath (name_str, realname_str))
      {
        char const * realname = storeString (file_op::dos2unix (realname_str));
        FilenameImplPtr impl = new FilenameImpl (name, realname);
        data_table.addData (result, impl);
        filename = Filename (impl.pointer ());
        return true;
      }
      return false;
    }

    // store filename (for #lines)
    Filename storeFilename (util::String const & name_str)
    {
      char const * name = storeString (file_op::dos2unix (name_str));
      FilenameImplPtrDataTableFindResult result = data_table.findData ((size_t) name);
      if (result.hasData ())
      {
        return Filename (result.getData ().pointer ());
      }
      char const * realname = name;
      FilenameImplPtr impl = new FilenameImpl (name, realname);
      data_table.addData (result, impl);
      return Filename (impl.pointer ());
    }
  }

  // get filename table
  FilenameTable & getFilenameTable ()
  {
    static FilenameTable table;
    return table;
  }
}

// util
namespace util
{
  // get filename, return true if found realname
  bool getFilename (util::String const & name, Filename & filename)
  {
    return getFilenameTable ().getFilename (name, filename);
  }

  // store filename (for #lines), use name as realname (do not call getRealPath())
  Filename storeFilename (util::String const & name)
  {
    return getFilenameTable ().storeFilename (name);
  }
}
