// util_Table.lzz
//

$hdr
// library
#include <stddef.h>
$end

//
// util
//
namespace util
{
  // TableNode
  struct TableNode
  {
    // handle
    size_t handle;

    // bit mask
    size_t bit_mask;

    // left node
    TableNode * left;
    
    // right node
    TableNode * right;

    // constructor
    inline TableNode (size_t handle, size_t bit_mask)
      : handle (handle), bit_mask (bit_mask)
    {
    }

    // destructor
    ~ TableNode ()
    {
      if (left->bit_mask > bit_mask)
      {
        delete left;
      }
      if (right->bit_mask > bit_mask)
      {
        delete right;
      }
    }
  }

  // Table
  class Table
  {
    // root node
    TableNode * m_root;

  public:

    // constructor
    Table ()
    {
      m_root = new TableNode (0, 0xFFFFFFFF);
      m_root->left = m_root;
      m_root->right = m_root;
    }

    // destructor
    ~ Table ()
    {
      delete m_root;
    }

    // add handle, true if added
    bool addHandle (size_t handle)
    {
      // find closest match
      TableNode * n, * m, ** p;
      size_t bit_mask;
      n = m_root;
      do
      {
        bit_mask = n->bit_mask;
        if (handle & bit_mask)
        {
          n = n->right;
        }
        else
        {
          n = n->left;
        }
      }
      while (bit_mask < n->bit_mask);
      // is equal
      if (handle == n->handle)
      {
        return false;
      }
      size_t dif_bit_mask = get_fdb_mask (handle, n->handle);
      // where to insert it?
      p = & m_root;
      for (bit_mask = 0; dif_bit_mask > (n = * p)->bit_mask && bit_mask < n->bit_mask;)
      {
        bit_mask = n->bit_mask;
        if (handle & bit_mask)
        {
          p = & n->right;
        }
        else
        {
          p = & n->left;
        }
      }
      // create a new node
      m = new TableNode (handle, dif_bit_mask);
      // add left and right nodes
      if (handle & dif_bit_mask)
      {
        m->right = m;
        m->left = n;
      }
      else
      {
        m->left = m;
        m->right = n;
      }
      * p = m;
      return true;
    }

  private:

    // get first diff bit as mask
    inline size_t get_fdb_mask (size_t handle1, size_t handle2)
    {
      int i, k;
      for (i = 1, k = handle1 ^ handle2; ! (k & i); i <<= 1);
      return i;
    }
  }
}
