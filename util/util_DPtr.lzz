// util_DPtr.lzz
//
// smart pointer for derived classes
//
// Copyright (C) 2002, Michael Spencer
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, subject to the following
// restrictions:
// 
//   1. The origin of this software must not be misrepresented; you must
//      not claim that you wrote the original software. If you use this
//      software in a product, an acknowledgment in the product
//      documentation would be appreciated but is not required.
// 
//   2. Altered source versions must be plainly marked as such, and must
//      not be misrepresented as being the original software.
// 
// Basil documentation, as well as the latest version, is available at
// http://www.lazycplusplus.com/basil.
//
// Send comments and bug reports to michael_spencer@lazycplusplus.com.
// 

$pragma tpl

$hdr
// util
#include "util_BPtr.h"
$end

// util
namespace util
{
  // DPtr
  template <class S, class T>
  class DPtr : public BPtr <T>
  {
  public:
    // default constructor
    DPtr ()
      : BPtr <T> ()
    {
    }

    // constructor
    DPtr (S * s)
      : BPtr <T> (s)
    {
    }

    // base constructor
    DPtr (BPtr <T> const & bptr)
      : BPtr <T> (bptr)
    {
    }

    // destructor
    ~ DPtr ()
    {
    }

    // copy assignment
    DPtr <S, T> & operator = (BPtr <T> const & bptr)
    {
      BPtr <T>::operator = (bptr);
      return * this;
    }

    // operator ->
    inline S * operator -> () const
    {
      return static_cast <S *> (this->pointer ());
    }

    // operator *
    inline S & operator * () const
    {
      return * static_cast <S *> (this->pointer ());
    }
  }
}
