// gram_CSPrep.lzz
//
// context sensitive preprocessor
//

#hdr
// gram
#include "gram_Prep.h"

// util
#include "util_String.h"
#end

#src
// gram
#include "gram_LexBlockToken.h"
#end

namespace gram
{
  // CSPrep
  class CSPrep
  {
    // preprocessor
    Prep m_prep;

  public:
    // constructor
    CSPrep (util::String const & name, smtc::Output * output, bool insert_all = false)
      : m_prep (name, output, insert_all)
    {
    }

    // constructor, string and loc instead of filename, for nested parsing
    CSPrep (util::String const & str, util::Loc const & loc)
      : m_prep (str, loc)
    {
    }

    // get next token
    basl::Token getNextToken (int lex_state)
    {
      basl::Token token;
      if (lex_state == 0 || ! lexBlockToken (m_prep, lex_state, token))
      {
        token = m_prep.getNextToken ();
      }
      return token;
    }    
  }
}
