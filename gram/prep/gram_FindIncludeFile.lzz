// gram_FindIncludeFile.lzz
//

$hdr
// util
#include "util_String.h"
$end

$src
// std lib
#include <algorithm>

// config
#include "conf_Config.h"

// util
#include "util_FileOp.h"
$end

// private namespace
namespace
{
  // using file_op
  using namespace util::file_op;

  // true if in current dir
  bool findInDir (util::String const & dir, util::String const & name, util::String & fullname)
  {
    bool result = false;
    util::String file = join (dir, name);
    if (exists (file) && ! isDirectory (file))
    {
      result = true;
      fullname = file;
    }
    return result;
  }

  // find in dir
  inline bool FindInDir (util::String const & name, util::String & fullname; util::String const & dir) const
  {
    return findInDir (dir, name, fullname);
  }
}

// gram
namespace gram
{
  // using file_op
  using namespace util::file_op;

  // find include file, if found set fullname and return true, sys true if file enclosed in '<' and '>'.
  bool findIncludeFile (util::String const & inclname, util::String const & name, bool sys, util::String & fullname)
  {
    // if absolute then no need to search path
    bool result = false;
    if (isAbsolute (name))
    {
      if (exists (name))
      {
        result = true;
        fullname = name;
      }
    }
    // otherwise search in curent dir if not sys 
    else if (! sys && findInDir (getPath (inclname), name, fullname))
    {
      result = true;
    }
    else
    {
      // search in path list
      util::StringVector const & path_set = conf::getOptionValue (conf::opt_incl_path_set);
      result = std::find_if (path_set.begin (), path_set.end (), FindInDir (name, fullname)) != path_set.end ();
    }
    return result;
  }
}
