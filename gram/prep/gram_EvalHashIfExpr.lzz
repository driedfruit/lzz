// gram_EvalHashIfExpr.lzz
//
// evaluate #if expression
//

$hdr
// gram
#include "basl_TokenDeque.h"
$end

$src
// gram
#include "gram_GetIdent.h"
#include "gram_LexPPNumber.h"
#include "gram_LiteralCharToInt.h"
#include "gram_MacroTable.h"
#include "gram_Message.h"
#include "gram_PrepKeywordTable.h"
#include "gram_TokenNumber.h"

// util
#include "util_Exception.h"

#include <stdlib.h>
$end

// private namespace
namespace
{
  // using gram
  using namespace gram;

  // value type
  typedef long int ValueType;

  // ExprParser
  struct ExprParser (util::Ident const & dir_name, util::Loc const & eol_loc, basl::TokenDequeConstIter beg, basl::TokenDequeConstIter end)
  {
    // parse entry function, return true if expr is non-zero
    bool parse ()
    {
      nextToken ();
      ValueType value = parseExpr ();
      if (kind != EOT)
      {
        error ();
      }
      // cout << "#if value: " << value << endl;
      return value != 0;
    }

  private:
    // kind of next token or EOT if end
    int kind;

    // next token
    basl::Token token;

    // get next token
    void nextToken ()
    {
      if (beg == end)
      {
        kind = EOT;
      }
      else
      {
        token = * beg;
        ++ beg;
        kind = token.getNumber ();
        // must lex pp-numers to literal tokens
        if (kind == PP_NUMBER_TOKEN)
        {
          lexPPNumber (token);
          kind = token.getNumber ();
        }
        if (kind == IDENT_TOKEN && isPrepKeyword (token.getLexeme (), kind))
        {
          token.setNumber (kind);
        }
      }
    }

    // expr -> cond-expr
    ValueType parseExpr ()
    {
      return parseCondExpr ();
    }

    // cond-expr -> log-or-expr QMARK expr COLON expr
    // cond-expr -> log-or-expr
    ValueType parseCondExpr ()
    {
      ValueType value = parseLogOrExpr ();
      if (kind == QMARK_TOKEN)
      {
        nextToken ();
        ValueType t_value = parseExpr ();
        if (kind != COLON_TOKEN)
        {
          error ();
        }
        nextToken ();
        ValueType f_value = parseExpr ();
        value = (value != 0) ? t_value : f_value;
      }
      return value;
    }

    // log-or-cxpr -> log-or-cxpr OR log-and-cxpr
    // log-or-cxpr -> log-and-cxpr
    ValueType parseLogOrExpr ()
    {
      ValueType value = parseLogAndExpr ();
      for (;;)
      {
        if (kind == OR_TOKEN)
        {
          nextToken ();
          value = parseLogAndExpr () != 0 || value != 0;
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // log-and-cxpr -> log-and-cxpr AND incl-or-cxpr
    // log-and-cxpr -> incl-or-cxpr
    ValueType parseLogAndExpr ()
    {
      ValueType value = parseInclOrExpr ();
      for (;;)
      {
        if (kind == AND_TOKEN)
        {
          nextToken ();
          value = parseInclOrExpr () != 0 && value != 0;
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // incl-or-cxpr -> incl-or-cxpr BITOR excl-or-cxpr
    // incl-or-cxpr -> excl-or-cxpr
    ValueType parseInclOrExpr ()
    {
      ValueType value = parseExclOrExpr ();
      for (;;)
      {
        if (kind == BITOR_TOKEN)
        {
          nextToken ();
          value |= parseExclOrExpr ();
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // excl-or-cxpr -> excl-or-cxpr XOR and-cxpr
    // excl-or-cxpr -> and-cxpr
    ValueType parseExclOrExpr ()
    {
      ValueType value = parseAndExpr ();
      for (;;)
      {
        if (kind == XOR_TOKEN)
        {
          nextToken ();
          value ^= parseAndExpr ();
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // and-cxpr -> and-cxpr BITAND eq-cxpr
    // and-cxpr -> eq-cxpr
    ValueType parseAndExpr ()
    {
      ValueType value = parseEqExpr ();
      for (;;)
      {
        if (kind == BITAND_TOKEN)
        {
          nextToken ();
          value = value & parseEqExpr ();
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // eq-cxpr -> eq-cxpr EQ rel-cxpr
    // eq-cxpr -> eq-cxpr NOTEQ rel-cxpr
    // eq-cxpr -> rel-cxpr
    ValueType parseEqExpr ()
    {
      ValueType value = parseRelExpr ();
      for (;;)
      {
        if (kind == EQ_TOKEN)
        {
          nextToken ();
          value = value == parseRelExpr ();
        }
        else if (kind == NOTEQ_TOKEN)
        {
          nextToken ();
          value = value != parseRelExpr ();
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // rel-cxpr -> rel-cxpr LT shift-cxpr
    // rel-cxpr -> rel-cxpr GT shift-cxpr
    // rel-cxpr -> rel-cxpr LTEQ shift-cxpr
    // rel-cxpr -> rel-cxpr GTEQ shift-cxpr
    // rel-cxpr -> shift-cxpr
    ValueType parseRelExpr ()
    {
      ValueType value = parseShiftExpr ();
      for (;;)
      {
        if (kind == LT_TOKEN)
        {
          nextToken ();
          value = value < parseShiftExpr ();
        }
        else if (kind == GT_TOKEN)
        {
          nextToken ();
          value = value > parseShiftExpr ();
        }
        else if (kind == LTEQ_TOKEN)
        {
          nextToken ();
          value = value <= parseShiftExpr ();
        }
        else if (kind == GTEQ_TOKEN)
        {
          nextToken ();
          value = value >= parseShiftExpr ();
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // shift-cxpr -> shift-cxpr LSHIFT add-cxpr
    // shift-cxpr -> shift-cxpr RSHIFT add-cxpr
    // shift-cxpr -> add-cxpr
    ValueType parseShiftExpr ()
    {
      ValueType value = parseAddExpr ();
      for (;;)
      {
        if (kind == LSHIFT_TOKEN)
        {
          nextToken ();
          value <<= parseAddExpr ();
        }
        else if (kind == RSHIFT_TOKEN)
        {
          nextToken ();
          value >>= parseAddExpr ();
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // add-cxpr -> add-cxpr PLUS mul-cxpr
    // add-cxpr -> add-cxpr MINUS mul-cxpr
    // add-cxpr -> mul-cxpr
    ValueType parseAddExpr ()
    {
      ValueType value = parseMulExpr ();
      for (;;)
      {
        if (kind == PLUS_TOKEN)
        {
          nextToken ();
          value += parseMulExpr ();
        }
        else if (kind == MINUS_TOKEN)
        {
          nextToken ();
          value -= parseMulExpr ();
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // mul-cxpr -> mul-cxpr TIMES unary-cxpr
    // mul-cxpr -> mul-cxpr DIVIDE unary-cxpr
    // mul-cxpr -> mul-cxpr MOD unary-cxpr
    // mul-cxpr -> unary-cxpr
    ValueType parseMulExpr ()
    {
      ValueType value = parseUnaryExpr ();
      for (;;)
      {
        if (kind == TIMES_TOKEN)
        {
          nextToken ();
          value *= parseUnaryExpr ();
        }
        else if (kind == DIVIDE_TOKEN || kind == MOD_TOKEN)
        {
          bool is_divide = kind == DIVIDE_TOKEN;
          util::Loc const & op_loc = token.getLoc ();
          nextToken ();
          ValueType divisor = parseUnaryExpr ();
          if (divisor == 0)
          {
            msg::hashIfDivideByZero (op_loc, dir_name);
            throw util::Exception ();
          }
          value = is_divide ? value / divisor : value % divisor;
        }
        else
        {
          break;
        }
      }
      return value;
    }

    // unary-cxpr -> PLUS unary-cxpr
    // unary-cxpr -> MINUS unary-cxpr
    // unary-cxpr -> NOT unary-cxpr
    // unary-cxpr -> BITNOT unary-cxpr
    // unary-cxpr -> DEFINED ( IDENT )
    // unary-cxpr -> DEFINED IDENT
    // unary-cxpr -> primary-cxpr
    ValueType parseUnaryExpr ()
    {
      ValueType value;
      if (kind == PLUS_TOKEN)
      {
        nextToken ();
        value = + parseUnaryExpr ();
      }
      else if (kind == MINUS_TOKEN)
      {
        nextToken ();
        value = - parseUnaryExpr ();
      }
      else if (kind == NOT_TOKEN)
      {
        nextToken ();
        value = ! parseUnaryExpr ();
      }
      else if (kind == BITNOT_TOKEN)
      {
        nextToken ();
        value = ~ parseUnaryExpr ();
      }
      else if (kind == IDENT_TOKEN && token.getLexeme () == defined_ident)
      {
        nextToken ();
        if (kind == IDENT_TOKEN)
        {
          value = isMacro (token.getLexeme ()) ? 1 : 0;
          nextToken ();
        }
        else if (kind == LPAREN_TOKEN)
        {
          nextToken ();
          if (kind == IDENT_TOKEN)
          {
            value = isMacro (token.getLexeme ()) ? 1 : 0;
            nextToken ();
            if (kind == RPAREN_TOKEN)
            {
              nextToken ();
            }
            else
            {
              // syntax error, but OK to continue
              msg::missingHashIfDefinedRightParen (token.getLoc (), dir_name);
            }
          }
          else
          {
            // syntax error
            msg::missingHashIfDefinedIdent (token.getLoc (), dir_name);
            throw util::Exception ();
          }
        }
        else
        {
          // syntax error
          msg::missingHashIfDefinedIdent (token.getLoc (), dir_name);
          throw util::Exception ();
        }
      }
      else
      {
        value = parsePrimaryExpr ();
      }
      return value;
    }

    // primary-cxpr -> LPAREN cxpr RPAREN
    // primary-cxpr -> ZERO
    // primary-cxpr -> LITERAL_INT
    // primary-cxpr -> LITERAL_CHAR
    // primary-cxpr -> LITERAL_FLOAT
    // primary-cxpr -> IDENT
    ValueType parsePrimaryExpr ()
    {
      ValueType value;
      if (kind == LPAREN_TOKEN)
      {
        nextToken ();
        value = parseExpr ();
        if (kind == RPAREN_TOKEN)
        {
          nextToken ();
        }
        else
        {
          error ();
        }
      }
      else if (kind == LITERAL_INT_TOKEN || kind == ZERO_TOKEN)
      {
        value = strtol (token.getLexeme ().c_str (), 0, 0);
        nextToken ();
      }
      else if (kind == LITERAL_CHAR_TOKEN)
      {
        value = literalCharToInt (token.getLoc (), token.getLexeme ());
        nextToken ();
      }
      else if (kind == LITERAL_FLOAT_TOKEN)
      {
        // read integer part
        value = strtol (token.getLexeme ().c_str (), 0, 0);
        nextToken ();
      }
      else if (kind == IDENT_TOKEN)
      {
        if (token.getLexeme () == true_ident)
        {
          value = 1;
        }
        else
        {
          value = 0;
        }
        nextToken ();
      }
      else
      {
        error ();
      }
      return value;
    }

    // error
    void error ()
    {
      // issue message and abort
      if (kind == EOT)
      {
        msg::hashIfSyntaxErrorAtEol (eol_loc, dir_name);
      }
      else
      {
        msg::hashIfSyntaxErrorBeforeToken (token.getLoc (), dir_name, token.getLexeme ());
      }
      throw util::Exception ();
    }
  }
}

// gram
namespace gram
{
  // evaluate #if expression, return true if no errors and condition is true
  bool evalHashIfExpr (util::Ident const & dir_name, util::Loc const & eol_loc, basl::TokenDeque const & in_set)
  {
    ExprParser parser (dir_name, eol_loc, in_set.begin (), in_set.end ());
    return parser.parse ();
  }
}
