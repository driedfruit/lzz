// gram_FileReader.lzz
//
// Should include location be passed to reader?  FileOpenError would
// then point to #include (or #insert).  Main file could use default
// loc.
//

$hdr
// library
#include <cstdio>

// util
#include "util_Filename.h"
#include "util_Loc.h"
#include "util_String.h"
$end

$src
// gram
#include "gram_Message.h"

// util
#include "util_Exception.h"
$end

// private namespace
namespace
{
  // file buffer size
  enum { FILE_BUF_SIZE = 4096 }

  // file states
  enum
  {
    // at start of file, file not open
    FILE_START,

    // file opened then closed
    FILE_CLOSED,

    // file open
    FILE_OPEN,

    // at end of file, file is closed
    FILE_EOF
  }
}

// gram
namespace gram
{
  // using util and msg
  using namespace util;
  using namespace msg;
 
  // FileReader
  class FileReader
  {
    // max peek
    enum { MAX_PEEK = 16 }

    // filename
    util::Filename m_filename;
    
    // file 
    FILE * m_fp;

    // file state
    int m_state;

    // saved file position after pause
    fpos_t m_file_pos;

    // file buffer
    char * m_buf;

    // file buf begin
    char * m_buf_beg;

    // file buf end
    char * m_buf_end;

    // peek buffer
    char m_peek_buf [MAX_PEEK];

    // peek begin
    int m_peek_beg;

    // peek end
    int m_peek_end;

  public:
    // constructor
    FileReader (util::Filename const & filename)
      : m_filename (filename), m_state (FILE_START), m_buf_beg (0), m_buf_end (0), m_peek_beg (0), m_peek_end (0)
    {
      // allocate file buffer
      m_buf = new char [FILE_BUF_SIZE];
    }

    // constructor
    FileReader (util::String const & str, util::Loc const & loc)
      : m_filename (loc.getFilename ()), m_state (FILE_EOF), m_peek_beg (0), m_peek_end (0)
    {
      // save string in buffer
      int len = str.length ();
      m_buf = new char [len + 1];
      m_buf_beg = m_buf;
      m_buf_end = m_buf_beg + len;
      str.copy (m_buf, len);
    }

    // destructor
    ~ FileReader ()
    {
      // free buffer
      delete [] m_buf;
    }

    // get filename
    inline util::Filename const & getFilename () const
    {
      return m_filename;
    }

    // peek n chars ahead, return true successful
    bool peekChar (char & ch, int n = 0)
    {
      int i = (m_peek_beg + n) % MAX_PEEK;
      if (i == m_peek_end)
      {
        if (! readDirectChar (m_peek_buf [m_peek_end]))
        {
          return false;
        }
        m_peek_end = (m_peek_end + 1) % MAX_PEEK;
      }
      ch = m_peek_buf [i]; 
      return true;
    }

    // read char, return true if successful
    bool readChar (char & ch)
    {
      // check in peek buffer first
      if (m_peek_beg == m_peek_end)
      {
        if (! readDirectChar (ch))
        {
          return false;
        }
      }
      else
      {
        ch = m_peek_buf [m_peek_beg];
        m_peek_beg = (m_peek_beg + 1) % MAX_PEEK;
      }
      return true;
    }

    // pause
    void pause ()
    {
      if (m_state == FILE_OPEN)
      {
        // save file position
        if (fgetpos (m_fp, & m_file_pos) != 0)
        {
          // file access error
          msg::fileAccessError (util::Loc (), m_filename.getName ());
          throw util::Exception ();
        }
        fclose (m_fp);
        m_state = FILE_CLOSED;
      }
    }

  private:
    // read direct char, return true if successful
    bool readDirectChar (char & ch)
    {
      // otherwise read from file
      if (m_buf_beg == m_buf_end && m_state != FILE_EOF)
      {
        if (m_state == FILE_CLOSED || m_state == FILE_START)
        {
          m_fp = fopen (m_filename.getName (), "r");
          if (! m_fp)
          {
            msg::fileOpenError (util::Loc (), m_filename.getName ());
            throw util::Exception ();
          }
          // advance file pointer if closed
          if (m_state == FILE_CLOSED)
          {
            // set file position
            if (fsetpos (m_fp, & m_file_pos) != 0)
            {
              // file access error
              msg::fileAccessError (util::Loc (), m_filename.getName ());
              throw util::Exception ();
            }
          }
        }
        // read characters into buffer
        int num_read = fread (m_buf, sizeof (char), FILE_BUF_SIZE, m_fp);
        // check if end of file
        if (feof (m_fp))
        {
          // close file
          fclose (m_fp);
          m_state = FILE_EOF;
        }
        else
        {
          // otherwise make sure some characters were read
          if (num_read == 0)
          {
            // file access error
            msg::fileAccessError (util::Loc (), m_filename.getName ());
            throw util::Exception ();
          }
          // file is now open
          m_state = FILE_OPEN;
        }
        // set buf bounds
        m_buf_beg = m_buf;
        m_buf_end = m_buf_beg + num_read;
      }
      // get next char
      if (m_buf_beg == m_buf_end)
      {
        return false;
      }
      ch = * m_buf_beg ++;
      return true;
    }
  }
}
