// gram_PrintPPTokenSet.lzz
//
// print preprocessed token set
//

$hdr
// std lib
#include <iostream>

// gram
#include "basl_TokenDeque.h"
$end

$src
// gram
#include "gram_PrettyPrintTokens.h"
$end

// gram
namespace gram
{
  // now using prettyPrintTokens ... 

  /*
  // print pp token
  void PrintPPToken (std::ostream & os, char const * last_filename = 0, int last_line = 0; basl::Token const & token)
  {
    util::Loc const & loc = token.getLoc ();
    int line = loc.getLine ();
    char const * filename = loc.getFilename ().getName ();
    if (loc.getLine () != last_line || filename != last_filename)
    {
      // new line and indent
      os << '\n';
      int num_spaces = loc.getColumn () - 1;
      if (num_spaces > 0)
      {
        os << util::getSpaces (num_spaces);
      }
      last_line = line;
      last_filename = filename;
    }
    else
    {
      os << ' ';
    }
    if (token.getNumber () != EOT)
    {
      os << token.getLexeme ().c_str ();
    }
  }
  */

  // print pp token set to os
  void printPPTokenSet (std::ostream & os, basl::TokenDeque const & token_set)
  {
    prettyPrintTokensToStream (os, token_set);

    /*
    std::for_each (token_set.begin (), token_set.end (), PrintPPToken (os));
    // print final newline if token_set not complete
    if (token_set.back ().getNumber () != EOT)
    {
      os << '\n';
    }
    */
  }
}
