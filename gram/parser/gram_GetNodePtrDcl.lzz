// gram_GetNodePtrDcl.lzz
//

$hdr
// basil
#include "basl_Nonterm.h"

// semantic
#include "smtc_CvType.h"
$end

$src
// gram
#include "gram_GetNodeCvSpecSeq.h"
#include "gram_GetNodeName.h"
#include "gram_Nonterm.h"
#include "gram_Visitor.h"

// semantic
#include "smtc_GetCv.h"
#include "smtc_GetCvType.h"
#include "smtc_GetMbrPtrType.h"
#include "smtc_GetPtrType.h"
#include "smtc_GetRefType.h"
$end

// private namespace
namespace
{
  // using gram
  using namespace gram;

  // GetNodePtrDcl
  struct GetNodePtrDcl (smtc::CvType & cv_type) : Visitor
  {
    // ptr-oper -> TIMES cv-spec-seq-opt
    void visit (PtrOper1Node & node) const
    {
      smtc::Cv cv = getNodeCvSpecSeq (node.getCvSpecSeqOpt ());
      cv_type = smtc::getCvType (smtc::getPtrType (cv_type), cv);
    }

    // ptr-oper -> BITAND
    void visit (PtrOper2Node & node) const
    {
      cv_type = smtc::getCvType (smtc::getRefType (cv_type), smtc::getCv (false, false));
    }

    // ptr-oper -> obj-name DCOLON TIMES cv-spec-seq-opt
    void visit (PtrOper3Node & node) const
    {
      smtc::NamePtr mbr_name = getNodeName (node.getObjName ());
      smtc::Cv cv = getNodeCvSpecSeq (node.getCvSpecSeqOpt ());
      cv_type = smtc::getCvType (smtc::getMbrPtrType (mbr_name, cv_type), cv);
    }
  }
}

// gram
namespace gram
{
  // get node ptr dcl
  void getNodePtrDcl (basl::Nonterm & nonterm, smtc::CvType & cv_type)
  {
    nonterm.accept (GetNodePtrDcl (cv_type));
  }
}
