// gram_GetNodeCvSpecSeq.lzz
//

$hdr
// basil
#include "basl_Nonterm.h"

// semantic
#include "smtc_Cv.h"
$end

$src
// gram
#include "gram_Message.h"
#include "gram_Nonterm.h"
#include "gram_TokenNumber.h"
#include "gram_Visitor.h"

// semantic
#include "smtc_GetCv.h"
$end

// private namespace
namespace
{
  // using gram
  using namespace gram;

  // GetNodeCvSpecSeq
  struct GetNodeCvSpecSeq (bool & c, bool & v) : Visitor
  {
    // cv-spec -> cv-token
    void visit (CVSpecNode & node) const
    {
      util::Loc const & loc = node.getCvToken ().getLoc ();
      if (node.getCvToken ().getNumber () == CONST_TOKEN)
      {
        if (c)
        {
          msg::duplicateSpecifier (loc, "const");
        }
        else
        {
          c = true;
        }
      }
      else if (v)
      {
        msg::duplicateSpecifier (loc, "volatile");
      }
      else
      {
        v = true;
      }
    }
  }
}

// gram
namespace gram
{
  // get node cv spec seq
  smtc::Cv getNodeCvSpecSeq (basl::Nonterm & nonterm)
  {
    bool c = false, v = false;
    nonterm.accept (GetNodeCvSpecSeq (c, v));
    return smtc::getCv (c, v);
  }
}
