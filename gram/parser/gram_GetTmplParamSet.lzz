// gram_GetTmplParamSet.lzz
//

$hdr
// basil
#include "basl_Nonterm.h"

// semantic
#include "smtc_ParamPtrVector.h"
$end

$src
// gram
#include "gram_BlockTable.h"
#include "gram_GetNodeDcl.h"
#include "gram_GetNodeName.h"
#include "gram_Nonterm.h"
#include "gram_Visitor.h"

// semantic
#include "smtc_GetNonTypeParam.h"
#include "smtc_GetTmplParam.h"
#include "smtc_GetTypeParam.h"
$end

// private namespace
namespace
{
  // using gram
  using namespace gram;

  // GetTmplParamSet
  struct GetTmplParamSet (smtc::ParamPtrVector & param_set)
    : Visitor ()
  {
    // param-init-decl -> param-decl
    void visit (ParamDecl1Node & node) const
    {
      SpecSel dcl_spec_sel;
      smtc::CvType cv_type;
      smtc::NamePtr name;
      getNodeParamDcl (node.getParamDecl (), dcl_spec_sel, cv_type, name);
      param_set.push_back (smtc::getNonTypeParam (dcl_spec_sel, cv_type, name, Block ()));
    }

    // param-init-decl -> param-decl ASSIGN BLOCK 6
    void visit (ParamDecl2Node & node) const
    {
      SpecSel dcl_spec_sel;
      smtc::CvType cv_type;
      smtc::NamePtr name;
      getNodeParamDcl (node.getParamDecl (), dcl_spec_sel, cv_type, name);
      Block defarg = getBlock (node.getBLOCK_TOKEN ().getLexeme ());
      param_set.push_back (smtc::getNonTypeParam (dcl_spec_sel, cv_type, name, defarg));
    }

    // type-param < * -> type-key + obj-name
    void visit (TypeParam1Node & node) const
    {
      smtc::NamePtr name = getNodeName (node.getObjName ());
      param_set.push_back (smtc::getTypeParam (name, smtc::CvType ()));
    }

    // type-param < * -> type-key + obj-name ASSIGN abstract-decl
    void visit (TypeParam2Node & node) const
    {
      smtc::NamePtr name = getNodeName (node.getObjName ());
      smtc::CvType def_type;
      getNodeAbstractDcl (node.getAbstractDecl (), def_type);
      param_set.push_back (smtc::getTypeParam (name, def_type));
    }

    // tmpl-tmpl-param < * -> TEMPLATE LT tmpl-param-list-opt GT CLASS obj-name
    void visit (TmplTmplParam1Node & node) const
    {
      smtc::ParamPtrVector nstd_param_set;
      getTmplParamSet (node.getTmplParamListOpt (), nstd_param_set);
      smtc::NamePtr name = getNodeName (node.getObjName ());
      param_set.push_back (smtc::getTmplParam (name, nstd_param_set, smtc::NamePtr ()));
    }

    // tmpl-tmpl-param < * -> TEMPLATE LT tmpl-param-list-opt GT CLASS obj-name ASGN obj-name
    void visit (TmplTmplParam2Node & node) const
    {
      smtc::ParamPtrVector nstd_param_set;
      getTmplParamSet (node.getTmplParamListOpt (), nstd_param_set);
      smtc::NamePtr name = getNodeName (node.getObjName1 ());
      smtc::NamePtr def_name = getNodeName (node.getObjName2 ());
      param_set.push_back (smtc::getTmplParam (name, nstd_param_set, def_name));
    }
  }
}

// gram
namespace gram
{
  // get template param set
  void getTmplParamSet (basl::Nonterm & nonterm, smtc::ParamPtrVector & param_set)
  {
    nonterm.accept (GetTmplParamSet (param_set));
  }
}
