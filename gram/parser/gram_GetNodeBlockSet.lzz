// gram_GetNodeBlockSet.lzz
//

$hdr
// basil
#include "basl_Nonterm.h"

// gram
#include "gram_BlockVector.h"
$end

$src
// gram
#include "gram_BlockTable.h"
#include "gram_Nonterm.h"
#include "gram_Visitor.h"
$end

// private namespace
namespace
{
  // using gram
  using namespace gram;

  // get node block set
  struct GetNodeBlockSet (BlockVector & block_set) : Visitor
  {
    // block -> BLOCK
    void visit (BlockNode & node) const
    {
      // trim block (in vdf direct obj inits: so the right paren and semi appear on the same line)
      Block block = getBlock (node.getBLOCK_TOKEN ().getLexeme ());
      block.trim ();
      block_set.push_back (block);
    }
  }
}

// gram
namespace gram
{
  // get node block set
  void getNodeBlockSet (basl::Nonterm & node, BlockVector & block_set)
  {
    node.accept (GetNodeBlockSet (block_set));
  }
}
