// smtc_Lzz.lzz
//

#hdr
// std lib
#include <iosfwd>

// util
#include "util_StringDeque.h"
#end

#src
// std lib
#include <algorithm>

// semantic
#include "smtc_CreateNsScope.h"
#include "smtc_GetGlobalNs.h"
#include "smtc_Output.h"
#include "smtc_PrintNs.h"

// gram
#include "gram_MacroTable.h"
#include "gram_ParseRecoverOpt.h"
#include "gram_Parser.h"
#include "gram_PrepFile.h"
#include "gram_PrintPPTokenSet.h"

// config
#include "conf_Config.h"
#include "conf_PrintHelp.h"

// config
#include "conf_Config.h"
#include "conf_PrintHelp.h"

// message
#include "msg_Recorder.h"

// util
#include "util_Exception.h"
#include "util_FilenameTable.h"
#end

namespace
{
  using namespace smtc;

#if 0
  // translate file
  // returns one of LZZ_RET_* codes
  int compileFile (util::String const & filename, std::ostream & os)
  {
    using namespace util;

    // assume success
    int ret_code = LZZ_RET_SUCCESS;

    // reset message recorder
    msg::resetRecorder ();
    // reset config options (possibly changed by #pragmas in previous files)
    conf::setInitConfig ();
    // reset macro table (clear and add -D macros) 
    gram::resetMacroTable ();

    // get pp options
    bool opt_pp_incl = conf::getOptionValue (conf::opt_pp_incl);
    bool opt_pp_all = conf::getOptionValue (conf::opt_pp_all);
    bool opt_pp = conf::getOptionValue (conf::opt_pp);

    // check if preprocessing file
    if (opt_pp_incl || opt_pp_all || opt_pp)
    {
      basl::TokenDeque token_set;
      try
      {
        if (opt_pp_incl || opt_pp_all)
        {
          gram::prepFile (filename, opt_pp_incl, token_set);
        }
        else
        {
          gram::ppParse (filename, token_set);
        }
      }
      catch (util::Exception const &)
      {
      }
      catch (...)
      {
        throw;
      }
      if (! msg::hasFatalMessage ())
      {
        ret_code = LZZ_RET_PP;
        gram::printPPTokenSet (os, token_set);
      }
    }
    // otherwise translating file
    else
    {
      NsPtr ns = smtc::getGlobalNs ();
      Output output (filename);
      try
      {
        gram::parse (filename, createNsScope (ns), output);
      }
      catch (util::Exception const &)
      {
      }
      catch (...)
      {
        throw;
      }
      if (msg::hasFatalMessage ())
      {
        // close output, do not write, but delete old files (if so configured)
        output.close (false);
      }
      else
      {
        // no errors so generate output files
        output.lexDone ();
        printNs (output, ns);
        output.close (true);
      }
    }
    // return code nonzero if file fails
    if (msg::hasFatalMessage ())
    {
      ret_code = LZZ_RET_ERROR;
    }
    else if (msg::hasWarningMessage () || msg::hasInfoMessage ())
    {
      ret_code = LZZ_RET_WARNINGS;
    }
    return ret_code;
  }
#endif

  // compile file
  void CompileFile (std::ostream & os; util::String const & filename) const
  {
    // reset config options (may have been changed by pragmas) and reset the macro table
    if (isPreprocessOptionSet ())
    {
      preprocessFile (filename, os);
    }
    else
    {
      Output output (filename);
      translateFile (filename, output);
    }
  }
}

// semantic
namespace smtc
{
  // types
  class Output;

  // true if a help options set
  bool isHelpOptionSet ()
  {
    return (
      conf::getOptionValue (conf::opt_help) ||
      conf::getOptionValue (conf::opt_version) ||
      conf::getOptionValue (conf::opt_rec_help) ||
      conf::getOptionValue (conf::opt_print_options) ||
      conf::getOptionValue (conf::opt_print_rec_tokens));
  }      

  // true if a preprocessor options set
  bool isPreprocessOptionSet ()
  {
    return (
      conf::getOptionValue (conf::opt_pp_incl) ||
      conf::getOptionValue (conf::opt_pp_all) ||
      conf::getOptionValue (conf::opt_pp));
  }      

  // printlzzHelp
  // return true if a help option is set, false otherwise
  void printLzzHelp (std::ostream & os)
  {
    if (conf::getOptionValue (conf::opt_help))
    {
      conf::printHelp (os);
    }
    else if (conf::getOptionValue (conf::opt_version))
    {
      conf::printVersion (os);
    }
    else if (conf::getOptionValue (conf::opt_rec_help))
    {
      gram::printRecoverHelp (os);
    }
    else if (conf::getOptionValue (conf::opt_print_options))
    {
      conf::printOptionValues (os);
    }
    else if (conf::getOptionValue (conf::opt_print_rec_tokens))
    {
      gram::printRecoverTokens (os);
    }
  }

  // preprocess file
  // return true if a preprocessor option set, false otherwise
  void preprocessFile (util::String const & filename, std::ostream & os)
  {
    gram::resetMacroTable ();
    // the parser can throw exceptions
    try
    {
      basl::TokenDeque token_set;
      msg::resetRecorder ();
      if (conf::getOptionValue (conf::opt_pp_incl) || conf::getOptionValue (conf::opt_pp_all))
      {
        gram::prepFile (filename, conf::getOptionValue (conf::opt_pp_incl), token_set);
      }
      else if (conf::getOptionValue (conf::opt_pp))
      {
        gram::ppParse (filename, token_set);
      }
      if (! msg::hasFatalMessage ())
      {
        gram::printPPTokenSet (os, token_set);
      }
    }
    catch (util::Exception const &)
    {
    }
    conf::setInitConfig ();
  }

  // translate file
  void translateFile (util::String const & filename, Output & output)
  {
    gram::resetMacroTable ();
    try
    {
      msg::resetRecorder ();
      NsPtr ns = smtc::getGlobalNs ();
      gram::parse (filename, createNsScope (ns), output);
      if (! msg::hasFatalMessage ())
      {
        output.lexDone ();
        printNs (output, ns);
        output.close (true);
      }
      else
      {
        output.close (false);
      }
    }
    catch (util::Exception const &)
    {
      output.close (false);
    }
    conf::setInitConfig ();
  }

  // compile files
  void compileFiles (util::StringDeque const & filenames, std::ostream & os)
  {
    if (isHelpOptionSet ())
    {
      printLzzHelp (os);
    }
    else
    {
      std::for_each (filenames.begin (), filenames.end (), CompileFile (os));
    }
  }

#if 0
  // lzz file
  // os is console output stream (for help text and pp output)
  // returns lzz error code
  int lzzFile (util::String const & filename, std::ostream & os)
  {
    int ret_code;
    if (printLzzHelp (os))
    {
      ret_code = LZZ_RET_HELP;
    }
    else
    {
      ret_code = compileFile (filename, os);
    }
    return ret_code;
  }

  // lzz files
  // os is console output stream (for help text and pp output)
  // returns LZZ_RET_ERROR if fatal in any file, LZZ_RET_SUCCESS otherwise
  int lzzFiles (util::StringDeque const & filenames, std::ostream & os)
  {
    int ret_code = LZZ_RET_SUCCESS;
    if (! printLzzHelp (os))
    {
      std::for_each (filenames.begin (), filenames.end (), CompileFile (os, ret_code));  
    }
    return ret_code;
  }
#endif
}
