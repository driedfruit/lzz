// smtc_FormTmplName.lzz
//

$hdr
// semantic
#include "smtc_NamePtr.h"

// util
#include "util_String.h"
$end

$src
// std lib
#include <cassert>

// semantic
#include "smtc_CreateQualName.h"
#include "smtc_CreateTmplName.h"
#include "smtc_NameVisitor.h"
#include "smtc_NonTmplName.h"
#include "smtc_QualName.h"
$end

// private namespace
namespace
{
  // using semantic
  using namespace smtc;

  // FormTmplName
  struct FormTmplName (util::String const & args, NamePtr & result)
    : NameVisitor
  {
    // qual name
    void visit (QualName const & name) const
    {
      result = createQualName (name.getQualName (), formTmplName (name.getUnqlName (), args));
    }

    // non tmpl name
    void visit (NonTmplName const & name) const
    {
      result = createTmplName (name.getBaseName (), false, args);
    }
  }
}

// semantic
namespace smtc
{
  // form tmpl name from name and args, if name is template name then just return it
  NamePtr formTmplName (NamePtr const & name, util::String const & args)
  {
    NamePtr result = name;
    name->accept (FormTmplName (args, result));
    return result;
  }
}
