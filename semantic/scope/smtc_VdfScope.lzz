// smtc_VdfScope.lzz
//
// vdf scope
//

$hdr
// semantic
#include "smtc_CvType.h"
#include "smtc_NamePtr.h"
#include "smtc_NsPtr.h"
#include "smtc_ParamPtrVector.h"
#include "smtc_ThrowSpecPtr.h"
#include "smtc_Scope.h"
$end

$src
// semantic
#include "smtc_ScopeVisitor.h"
$end

// semantic
namespace smtc
{
  // VdfScope
  class VdfScope : public Scope
  {
    // outer ns
    NsPtr m_outer_ns;

    // name of base class
    NamePtr m_base_type_name;

    // functor return type
    CvType m_ret_type;

    // functor name
    NamePtr m_name;

    // functor param list
    ParamPtrVector m_param_set;

    // true if vararg
    bool m_vararg;

    // throw spec
    ThrowSpecPtr m_throw_spec;

    // private ns within outer ns (for derived class definitions)
    NsPtr m_private_ns;

  public:
    // constructor
    VdfScope (NsPtr const & outer_ns, NamePtr const & base_type_name, CvType const & ret_type, NamePtr const & name,
        ParamPtrVector const & param_set, bool vararg, ThrowSpecPtr const & throw_spec, NsPtr const & private_ns)
      : m_outer_ns (outer_ns), m_base_type_name (base_type_name), m_ret_type (ret_type), m_name (name),
        m_param_set (param_set), m_vararg (vararg), m_throw_spec (throw_spec), m_private_ns (private_ns)
    {
    }

    // destructor
    ~ VdfScope ()
    {
    }

    // accept visitor
    void accept (ScopeVisitor const & visitor) const
    {
      visitor.visit (* this);
    }

    // get outer ns
    inline NsPtr const & getOuterNs () const
    {
      return m_outer_ns;
    }

    // get base type name
    inline NamePtr const & getBaseTypeName () const
    {
      return m_base_type_name;
    }

    // get functor return type
    inline CvType const & getReturnType () const
    {
      return m_ret_type;
    }

    // get functor name
    inline NamePtr const & getName () const
    {
      return m_name;
    }

    // get functor param set
    inline ParamPtrVector const & getParamSet () const
    {
      return m_param_set;
    }

    // has var arg
    inline bool hasVarArg () const
    {
      return m_vararg;
    }

    // get throw spec
    inline ThrowSpecPtr const & getThrowSpec () const
    {
      return m_throw_spec;
    }

    // get private ns
    inline NsPtr const & getPrivateNs () const
    {
      return m_private_ns;
    }
  }
}
