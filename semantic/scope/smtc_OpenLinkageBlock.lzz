// smtc_OpenLinkageBlock.lzz
//
// open an extern "C" block
//

#hdr
// semantic
#include "smtc_ScopePtr.h"
// util
#include "util_Loc.h"
#include "util_Ident.h"
#end

#src
// semantic
#include "smtc_CreateLinkageNs.h"
#include "smtc_CreateNsEntity.h"
#include "smtc_CreateNsScope.h"
#include "smtc_Ns.h"
#include "smtc_NsScope.h"
#include "smtc_ScopeVisitor.h"
#end

// private ns
namespace
{
  using namespace smtc;

  // open linkage block
  struct OpenLinkageBlock (util::Loc const & loc, util::Ident const & linkage, ScopePtr & res_scope)
    : ScopeVisitor 
  {
    // namespace scope
    void visit (NsScope const & scope) const
    {
      // create nested namespace and add to enclosing ns
      NsPtr const & encl_ns = scope.getNs ();
      NsPtr ns = createLinkageNs (encl_ns.unref (), loc, linkage);
      encl_ns->addEntity (createNsEntity (ns));
      // create ns scope
      res_scope = createNsScope (ns);
    }
  }
}

// semantic
namespace smtc
{
  // open linkage block, return enclosing scope
  ScopePtr openLinkageBlock (ScopePtr const & encl_scope, util::Loc const & loc, util::Ident const & linkage)
  {
    ScopePtr res_scope;
    encl_scope->accept (OpenLinkageBlock (loc, linkage, res_scope));
    return res_scope;
  }
}
