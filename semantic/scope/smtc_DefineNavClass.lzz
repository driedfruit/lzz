// smtc_DefineNavClass.lzz
//

$hdr
// semantic
#include "smtc_BaseSpecPtrVector.h"
#include "smtc_CvType.h"
#include "smtc_NamePtr.h"
#include "smtc_ParamPtrVector.h"
#include "smtc_ScopePtr.h"

// gram
#include "gram_SpecSel.h"
$end

$src
// semantic
#include "smtc_CreateNavClass.h"
#include "smtc_CreateNavClassEntity.h"
#include "smtc_CreateNavClassScope.h"
#include "smtc_DeclareLazyClassObjParamSet.h"
#include "smtc_Message.h"
#include "smtc_NavClass.h"
#include "smtc_Ns.h"
#include "smtc_NsScope.h"
#include "smtc_ParamToNavCtorParam.h"
#include "smtc_ScopeVisitor.h"
$end

// private namespace
namespace
{
  // using semantic
  using namespace smtc;

  // define nav class
  struct DefineNavClass (gram::SpecSel const & spec_sel, CvType const & ret_type, NamePtr const & name, CvType const & node_type,
      ParamPtrVector const & param_set, BaseSpecPtrVector const & base_spec_set, ScopePtr & res_scope)
    : ScopeVisitor
  {
    // only allowed in ns scope
    void visit (NsScope const & scope) const
    {
      int flags = spec_sel.getFlags ();
      ParamPtrVector ctor_param_set;
      std::transform (param_set.begin (), param_set.end (), std::back_inserter (ctor_param_set), ParamToNavCtorParam ());
      NavClassPtr nav_class = createNavClass (flags, name, ctor_param_set, base_spec_set, ret_type, node_type, param_set);
      // declare params as references 
      declareLazyClassObjParamSet (nav_class, param_set, base_spec_set, true);
      nav_class->setQualName (name);
      res_scope = createNavClassScope (nav_class);
      EntityPtr entity = createNavClassEntity (nav_class);
      scope.getNs ()->addEntity (entity);
    }
  }  
}

// semantic
namespace smtc
{
  // define navigator class, return class scope
  ScopePtr defineNavClass (ScopePtr const & scope, gram::SpecSel const & spec_sel, CvType const & ret_type, NamePtr const & name,
      CvType const & node_type, ParamPtrVector const & param_set, BaseSpecPtrVector const & base_spec_set)
  {
    ScopePtr res_scope;
    scope->accept (DefineNavClass (spec_sel, ret_type, name, node_type, param_set, base_spec_set, res_scope));
    return res_scope;
  }
}
