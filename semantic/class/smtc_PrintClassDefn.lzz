// smtc_PrintClassDefn.lzz
//

$hdr
// semantic
#include "smtc_ClassDefnPtr.h"
#include "smtc_FilePtr.h"
#include "smtc_NsPtr.h"
#include "smtc_PrintClassDecl.h"
$end

$src
// semantic
#include "smtc_BaseSpecSetToString.h"
#include "smtc_ClassDefn.h"
#include "smtc_GetNameLoc.h"
#include "smtc_PrintCode.h"
#include "smtc_PrintMbrDecl.h"
#include "smtc_PrintNsClose.h"
#include "smtc_PrintNsOpen.h"

// util
#include "util_AppendWithSpace.h"
$end

// semantic
namespace smtc
{
  // using util
  using namespace util;

  // PrintClassDefn
  struct PrintClassDefn : PrintClassDecl
  {
    // print in ns
    void print (FilePtr const & file, ClassDefnPtr const & class_defn, NsPtr const & ns) const
    {
      int ns_depth = printNsOpen (file, skind, ns);
      print (file, class_defn);
      printNsClose (file, skind, ns_depth);
    }

    // print
    void print (FilePtr const & file, ClassDefnPtr const & class_defn) const
    {
      printHead (file, class_defn);
      printMbrDecl (file, class_defn);
      printCloseBrace (file, skind, true);
    }

  protected:
    // print class defn head
    void printHead (FilePtr const & file, ClassDefnPtr const & class_defn) const
    {
      String str = declToString (class_defn);
      BaseSpecPtrVector const & base_spec_set = class_defn->getBaseSpecSet ();
      if (! base_spec_set.empty ())
      {
        appendWithSpace (str, ':');
        appendWithSpace (str, baseSpecSetToString (base_spec_set));
      }
      printLine (file, skind, getNameLoc (class_defn->getName ()), str);
      printOpenBrace (file, skind);
    }
  }
}
