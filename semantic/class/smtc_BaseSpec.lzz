// smtc_BaseSpec.lzz
//

$hdr
// semantic
#include "smtc_Access.h"
#include "smtc_NamePtr.h"
$end

$src
// semantic
$end

// semantic
namespace smtc
{
  // BaseSpec
  class BaseSpec
  {
    // access
    Access m_access;

    // true if virtual
    bool m_is_virtual;

    // base type name
    NamePtr m_base_name;

  public:
    // constructor
    BaseSpec (Access access, bool is_virtual, NamePtr const & base_name)
      : m_access (access), m_is_virtual (is_virtual), m_base_name (base_name)
    {
    }

    // destructor
    virtual ~ BaseSpec ()
    {
    }

    // get access
    inline Access getAccess () const
    {
      return m_access;
    }

    // true if virtual
    inline bool isVirtual () const
    {
      return m_is_virtual;
    }

    // get base type
    inline NamePtr const & getBaseName () const
    {
      return m_base_name;
    }

    // true if lazy base spec (has initializer)
    virtual bool isLazy () const
    {
      return false;
    }
  }
}
