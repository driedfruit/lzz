// smtc_CreateTmplLazyClass.lzz
//

$hdr
// semantic
#include "smtc_BaseSpecPtrVector.h"
#include "smtc_ClassKey.h"
#include "smtc_LazyClassPtr.h"
#include "smtc_NamePtr.h"
#include "smtc_ParamPtrVector.h"
#include "smtc_TmplLazyClassPtr.h"
#include "smtc_TmplSpecPtrVector.h"
$end

$src
// semantic
#include "smtc_CreateLazyClass.h"
#include "smtc_TmplLazyClass.h"
$end

// semantic
namespace smtc
{
  // create template lazy class
  TmplLazyClassPtr createTmplLazyClass (TmplSpecPtrVector const & tmpl_spec_set, int flags, ClassKey key, NamePtr const & name,
      ParamPtrVector const & param_set, bool vararg, BaseSpecPtrVector const & base_spec_set)
  {
    bool is_dll_api = false;
    LazyClassPtr lazy_class = createLazyClass (flags, key, name, is_dll_api, param_set, vararg, base_spec_set);
    return new TmplLazyClass (tmpl_spec_set, lazy_class);
  }

  // create template lazy class
  TmplLazyClassPtr createTmplLazyClass (TmplSpecPtrVector const & tmpl_spec_set, LazyClassPtr const & lazy_class)
  {
    return new TmplLazyClass (tmpl_spec_set, lazy_class);
  }
}
