// smtc_CreateTmplFuncDefn.lzz
//

$hdr
// semantic
#include "smtc_CtorInitPtr.h"
#include "smtc_FuncDefnPtr.h"
#include "smtc_NamePtr.h"
#include "smtc_ParamPtrVector.h"
#include "smtc_ThrowSpecPtr.h"
#include "smtc_TmplFuncDefnPtr.h"
#include "smtc_TmplSpecPtrVector.h"
#include "smtc_TryBlockPtr.h"
$end

$src
// semantic
#include "smtc_CreateFuncDefn.h"
#include "smtc_TmplFuncDefn.h"
$end

// gram
namespace gram
{
  // types
  class Block;
}

// semantic
namespace smtc
{
  // types
  class Linkage;
  class CvType;
  class Cv;

  // create tmpl func defn
  TmplFuncDefnPtr createTmplFuncDefn (TmplSpecPtrVector const & tmpl_spec_set, Linkage const & linkage, int flags, CvType const & ret_type,
      NamePtr const & name, ParamPtrVector const & param_set, bool vararg, Cv const & cv, ThrowSpecPtr const & throw_spec,
      CtorInitPtr const & ctor_init, gram::Block const & body, TryBlockPtr const & try_block)
  {
    FuncDefnPtr func_defn = createFuncDefn (linkage, flags, ret_type, name, param_set, vararg, cv, throw_spec, ctor_init, body, try_block);
    return createTmplFuncDefn (tmpl_spec_set, func_defn);
  }

  // create tmpl func defn
  TmplFuncDefnPtr createTmplFuncDefn (TmplSpecPtrVector const & tmpl_spec_set, FuncDefnPtr const & func_defn)
  {
    return new TmplFuncDefn (tmpl_spec_set, func_defn);
  }
}
