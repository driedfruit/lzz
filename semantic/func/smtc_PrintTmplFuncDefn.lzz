// smtc_PrintTmplFuncDefn.lzz
//

$hdr
// semantic
#include "smtc_NamePtr.h"
#include "smtc_NsPtr.h"
#include "smtc_PrintFuncDefn.h"
#include "smtc_TmplFuncDefnPtr.h"
#include "smtc_TmplSpecPtrVector.h"
$end

$src
// semantic
#include "smtc_PrintNsClose.h"
#include "smtc_PrintNsOpen.h"
#include "smtc_PrintTmplSpecSet.h"
#include "smtc_TmplFuncDefn.h"
$end

// semantic
namespace smtc
{
  // PrintTmplFuncDefn
  struct PrintTmplFuncDefn : PrintFuncDefn
  {
    // constructor
    inline PrintTmplFuncDefn (NamePtr const & qual_name = NamePtr ())
      : PrintFuncDefn (qual_name)
    {
    }

    // print tmpl func defn in ns
    void print (FilePtr const & file, SectionKind skind, TmplFuncDefnPtr const & tmpl_func_defn, NsPtr const & ns)
    {
      print (file, skind, tmpl_func_defn->getFuncDefn (), tmpl_func_defn->getTmplSpecSet (), ns);
    }

    // print func defn with tmpl spec set in ns
    void print (FilePtr const & file, SectionKind skind, FuncDefnPtr const & func_defn, TmplSpecPtrVector const & tmpl_spec_set, NsPtr const & ns)
    {
      int ns_depth = printNsOpen (file, skind, ns);
      print (file, skind, func_defn, tmpl_spec_set);
      printNsClose (file, skind, ns_depth);
    }

    // print tmpl func defn
    void print (FilePtr const & file, SectionKind skind, TmplFuncDefnPtr const & tmpl_func_defn)
    {
      print (file, skind, tmpl_func_defn->getFuncDefn (), tmpl_func_defn->getTmplSpecSet ());
    }

    // print func defn with tmpl spec set
    void print (FilePtr const & file, SectionKind skind, FuncDefnPtr const & func_defn, TmplSpecPtrVector const & tmpl_spec_set)
    {
      printTmplSpecSet (file, skind, tmpl_spec_set, is_decl);
      PrintFuncDefn::print (file, skind, func_defn);
    }
  }
}
