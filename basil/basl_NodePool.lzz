// basl_NodePool.lzz
//
// Copyright (C) 2002, Michael Spencer
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, subject to the following
// restrictions:
// 
//   1. The origin of this software must not be misrepresented; you must
//      not claim that you wrote the original software. If you use this
//      software in a product, an acknowledgment in the product
//      documentation would be appreciated but is not required.
// 
//   2. Altered source versions must be plainly marked as such, and must
//      not be misrepresented as being the original software.
// 
// Basil documentation, as well as the latest version, is available at
// http://www.lazycplusplus.com/basil.
//
// Send comments and bug reports to michael_spencer@lazycplusplus.com.
// 

$hdr
$end

$inl
// basil
#include "basl_Node.h"
$end

$src
// basil
#include "basl_Node.h"
$end

// basl
namespace basl
{
  // types
  struct Node;
  struct Nonterm;
  struct LRRule;
  struct Token;

  // NodePool
  class NodePool
  {
    // head of recycled list
    Node * m_recycled_node;

  public:
    // constructor
    NodePool ()
      : m_recycled_node (0)
    {
    }

    // destructor
    ~ NodePool ()
    {
      // free nodes
      while (m_recycled_node)
      {
        Node * node = m_recycled_node;
        m_recycled_node = node->prev;
        delete node;
      }
    }

    // get node
    Node * getNode (Node * prev, Token const & token, LRRule const * rule, Node * last_child)
    {
      Node * node;
      if (m_recycled_node)
      {
        node = m_recycled_node;
        m_recycled_node = node->prev;
      }
      else
      {
        node = new Node ();
      }
      if (last_child)
      {
        ++ last_child->num_ref;
      }
      node->prev = prev;
      node->nonterm.last_child = last_child;
      node->token = token;
      node->nonterm.rule = rule;
      node->num_ref = 0;
      return node;
    }

    // recycle node
    void recycleNode (Node * node)
    {
      for (;;)
      {
        Node * next_node = 0;
        if (node->nonterm.last_child && -- node->nonterm.last_child->num_ref == 0)
        {
          next_node = node->nonterm.last_child;
        }
        node->prev = m_recycled_node;
        m_recycled_node = node;
        if (! next_node)
        {
          break;
        }
        node = next_node;
      }
    }
  }

  // get node pool
  NodePool & getNodePool ()
  {
    static NodePool node_pool;
    return node_pool;
  }

  // get node
  inline Node * getNode (Node * prev, Token const & token, LRRule const * rule, Node * last_child)
  {
    return getNodePool ().getNode (prev, token, rule, last_child);
  }

  // recycle node
  inline void recycleNode (Node * node)
  {
    getNodePool ().recycleNode (node);
  }

  // add node reference
  inline void addNodeRef (Node * node)
  {
    if (node)
    {
      ++ node->num_ref;
    }
  }

  // remove node reference
  inline void remNodeRef (Node * node)
  {
    if (node && -- node->num_ref == 0)
    {
      recycleNode (node);
    }
  }
}
