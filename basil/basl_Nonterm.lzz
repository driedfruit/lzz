// basl_Nonterm.lzz
//
// Copyright (C) 2002, Michael Spencer
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, subject to the following
// restrictions:
// 
//   1. The origin of this software must not be misrepresented; you must
//      not claim that you wrote the original software. If you use this
//      software in a product, an acknowledgment in the product
//      documentation would be appreciated but is not required.
// 
//   2. Altered source versions must be plainly marked as such, and must
//      not be misrepresented as being the original software.
// 
// Basil documentation, as well as the latest version, is available at
// http://www.lazycplusplus.com/basil.
//
// Send comments and bug reports to michael_spencer@lazycplusplus.com.
// 

$hdr
// basil
#include "basl_AttribPtr.h"
#include "basl_Token.h"
$end

$inl
// basil
#include "basl_LRData.h"
#include "basl_NontermInfo.h"
$end

$src
// basil
#include "basl_LRData.h"
#include "basl_Node.h"
$end

// basil
namespace basl
{
  // types
  struct NontermInfo;
  struct Visitor;
  struct LRRule;
  class Node;
  class NodePool;

  // Nonterm
  class Nonterm
  {
    // rule
    LRRule const * rule;

    // last child
    Node * last_child;

    // attribute
    AttribPtr attrib;

    // NodePool has permission to access private members
    friend class NodePool;

  public:
    // constructor
    inline Nonterm ()
    {
    }

    // true if set
    inline bool isSet () const
    {
      return rule != 0;
    }

    // accept visitor
    inline void accept (Visitor const & visitor)
    {
      // accept visitor only if rule is set
      if (rule)
      {
        rule->nonterm_info->accept (* this, visitor);
      }
    }

    // get number of children
    inline int getNumChild () const
    {
      return rule->size;
    }
    
    // get child, 1 is first child
    Node & getChild (int num) const
    {
      return * last_child->getPrev (rule->size - num);
    }

    // visit children
    void visitChildren (Visitor const & visitor)
    {
      int n = rule->size;
      for (int i = 1; i <= n; ++ i)
      {
        Nonterm & nonterm = last_child->getPrev (n - i)->getNonterm ();
        if (nonterm.isSet ())
        {
          nonterm.accept (visitor);
        }
      }
    }

    // get rule, must be set
    inline LRRule const & getRule () const
    {
      return * rule;
    }

    // get info, must be set
    inline NontermInfo const * getInfo () const
    {
      return rule->nonterm_info;
    }

    // set attribute
    inline void setAttrib (AttribPtr const & a)
    {
      attrib = a;
    }

    // get attrib
    inline AttribPtr const & getAttrib () const
    {
      return attrib;
    }
  }
}
