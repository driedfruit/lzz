// basl_RefStack.lzz
//
// stack whose elements are reference counted not copied when stack is copied
//
// Copyright (C) 2002, Michael Spencer
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, subject to the following
// restrictions:
// 
//   1. The origin of this software must not be misrepresented; you must
//      not claim that you wrote the original software. If you use this
//      software in a product, an acknowledgment in the product
//      documentation would be appreciated but is not required.
// 
//   2. Altered source versions must be plainly marked as such, and must
//      not be misrepresented as being the original software.
// 
// Basil documentation, as well as the latest version, is available at
// http://www.lazycplusplus.com/basil.
//
// Send comments and bug reports to michael_spencer@lazycplusplus.com.
// 

// create tpl (template definition) file with .tpl extension
$pragma tpl on tpl

$hdr
$end

// basl
namespace basl
{
  // RefStackElem
  template <class DATA>
  struct RefStackElem
  {
    // prev element
    RefStackElem <DATA> * prev;

    // data
    DATA data;

    // num ref
    int num_ref;
  }

  // RefStackPool
  template <class DATA>
  class RefStackPool
  {
    // head of reclcyed stack
    RefStackElem <DATA> * m_recycled_elem;

  public:
    // constructor
    RefStackPool ()
      : m_recycled_elem (0)
    {
    }

    // destructor
    ~ RefStackPool ()
    {
      // free elems
      while (m_recycled_elem)
      {
        RefStackElem <DATA> * elem = m_recycled_elem;
        m_recycled_elem = elem->prev;
        delete elem;
      }
    }

    // get new elem
    RefStackElem <DATA> * getNewElem (RefStackElem <DATA> * prev, DATA const & data)
    {
      RefStackElem <DATA> * elem;
      if (m_recycled_elem)
      {
        elem = m_recycled_elem;
        m_recycled_elem = elem->prev;
      }
      else
      {
        elem = new RefStackElem <DATA> ();
      }
      elem->prev = prev;
      elem->data = data;
      elem->num_ref = 1;
      return elem;
    }

    // free elem
    void freeElem (RefStackElem <DATA> * elem)
    {
      for (;;)
      {
        RefStackElem <DATA> * next = 0;
        if (elem->prev && -- elem->prev->num_ref == 0)
        {
          next = elem->prev;
        }
        elem->prev = m_recycled_elem;
        m_recycled_elem = elem;
        if (! next)
        {
          break;
        }
        elem = next;
      }
    }
  }

  // RefStack
  template <class DATA>
  class RefStack
  {
    // elem
    RefStackElem <DATA> * m_elem;

    // pool
    static RefStackPool <DATA> m_elem_pool;

  public:
    // constructor
    RefStack ()
      : m_elem (0)
    {
    }

    // copy constructor
    RefStack (RefStack <DATA> const & stack)
      : m_elem (stack.m_elem)
    {
      if (m_elem)
      {
        ++ m_elem->num_ref;
      }
    }
  
    // destructor
    ~ RefStack ()
    {
      if (m_elem && -- m_elem->num_ref == 0)
      {
        m_elem_pool.freeElem (m_elem);
      }
    }

    // copy assignment
    RefStack <DATA> const & operator = (RefStack <DATA> const & stack)
    {
      RefStackElem <DATA> * elem = stack.m_elem;
      if (elem)
      {
        ++ elem->num_ref;
      }
      if (m_elem && -- m_elem->num_ref == 0)
      {
        m_elem_pool.freeElem (m_elem);
      }
      m_elem = elem;
      return * this;
    }

    // stack operations
    
    // get back element
    inline DATA const & back () const
    {
      return m_elem->data;
    }

    // pop back 
    void pop_back ()
    {
      RefStackElem <DATA> * elem = m_elem->prev;
      if (elem)
      {
        ++ elem->num_ref;
      }
      if (-- m_elem->num_ref == 0)
      {
        m_elem_pool.freeElem (m_elem);
      }
      m_elem = elem;
    }

    // pop back num elements
    void pop_back (int num)
    {
      RefStackElem <DATA> * elem = m_elem;
      for (int i = num; i > 0; -- i)
      {
        elem = elem->prev;
      }
      if (elem)
      {
        ++ elem->num_ref;
      }
      if (-- m_elem->num_ref == 0)
      {
        m_elem_pool.freeElem (m_elem);
      }
      m_elem = elem;
    }

    // push back
    void push_back (DATA const & data)
    {
      m_elem = m_elem_pool.getNewElem (m_elem, data);
    }
  }
}
